{"version":3,"sources":["reportWebVitals.js","helper/utils.jsx","components/Square/index.jsx","components/Board/index.jsx","components/Game/index.jsx","App/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateWinner","squares","size","length","i","maxRowLen","Math","sqrt","lines","j","a","b","c","d","e","set","Set","map","x","floor","square","line","Square","props","className","isWinSquare","onClick","value","defaultProps","Board","win","boardSize","row","push","renderSquare","renderSquares","includes","Game","status","useState","stepNumber","setStepNumber","xIsNext","setXIsNext","ascending","setAscending","setBoardSize","Array","fill","lastIndex","history","setHistory","currentHistory","current","winner","moves","step","move","desc","jumpTo","reverse","slice","concat","handleClick","type","min","max","onChange","event","oldSize","newSize","target","newHistory","forEach","vers","newArr","splice","pop","index","getPosition","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc6d388b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default function calculateWinner(squares) {\r\n  const size = squares.length;\r\n  for (let i = 0; i < size; i++) {\r\n    const maxRowLen = Math.sqrt(squares.length);\r\n    const lines = [\r\n      [i, i + 1, i + 2, i + 3, i + 4],\r\n      [\r\n        i,\r\n        i + maxRowLen,\r\n        i + 2 * maxRowLen,\r\n        i + 3 * maxRowLen,\r\n        i + 4 * maxRowLen,\r\n      ],\r\n      [\r\n        i,\r\n        i + maxRowLen + 1,\r\n        i + 2 * maxRowLen + 2,\r\n        i + 3 * maxRowLen + 3,\r\n        i + 4 * maxRowLen + 4,\r\n      ],\r\n      [\r\n        i,\r\n        i - maxRowLen + 1,\r\n        i - 2 * maxRowLen + 2,\r\n        i - 3 * maxRowLen + 3,\r\n        i - 4 * maxRowLen + 4,\r\n      ],\r\n    ];\r\n    for (let j = 0; j < lines.length; j++) {\r\n      const [a, b, c, d, e] = lines[j];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c] &&\r\n        squares[a] === squares[d] &&\r\n        squares[a] === squares[e]\r\n      ) {\r\n        const set = [\r\n          ...new Set(lines[j].map((x) => Math.floor(x / maxRowLen))),\r\n        ];\r\n        if (set.length === 5 || set.length === 1)\r\n          return { square: squares[a], line: lines[j] };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nSquare.propTypes = {\r\n  isWinSquare: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n};\r\nSquare.defaultProps = {\r\n  isWinSquare: false,\r\n  onClick: null\r\n};\r\n\r\nfunction Square(props) {\r\n  let className = \"\";\r\n  const { isWinSquare, onClick } = props;\r\n  if (isWinSquare) className = \" square-winner\";\r\n  return (\r\n    <button className={\"square\" + className} onClick={onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Square from \"../Square\";\r\n\r\nBoard.propTypes = {\r\n  squares: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n  win: PropTypes.array,\r\n  boardSize: PropTypes.number,\r\n};\r\nBoard.defaultProps = {\r\n  squares: [],\r\n  onClick: null,\r\n  win: [],\r\n  boardSize: 0\r\n};\r\n\r\nfunction Board(props) {\r\n  const { squares, onClick, win, boardSize } = props;\r\n  function renderSquares() {\r\n    let square = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < boardSize; j++) {\r\n        row.push(renderSquare(i * boardSize + j, squares, onClick, win));\r\n      }\r\n      square.push(\r\n        <div key={i} className=\"board-row\">\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return square;\r\n  }\r\n\r\n  return <div>{renderSquares()}</div>;\r\n}\r\nfunction renderSquare(i, squares, onClick, win) {\r\n  return (\r\n    <Square\r\n      key={i}\r\n      value={squares[i]}\r\n      onClick={() => onClick(i)}\r\n      isWinSquare={win && win.includes(i) ? true : false}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport calculateWinner from \"../../helper/utils\";\r\nimport Board from \"../Board\";\r\n\r\nfunction Game() {\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [ascending, setAscending] = useState(true);\r\n  const [boardSize, setBoardSize] = useState(5);\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(boardSize * boardSize).fill(null),\r\n      lastIndex: null,\r\n    },\r\n  ]);\r\n\r\n  function handleChange(event) {\r\n    const oldSize = boardSize;\r\n    const newSize = +event.target.value;\r\n    if (newSize > 20 || newSize < 5) return;\r\n    const currentHistory = [...history];\r\n    let newHistory = [];\r\n    if (newSize < oldSize) {\r\n      currentHistory.forEach((vers) => {\r\n        let newArr = [];\r\n        while (vers.squares.length)\r\n          newArr.push(vers.squares.splice(0, oldSize));\r\n        newArr.forEach((x) => x.pop());\r\n        newArr.pop();\r\n        newHistory.push({\r\n          squares: [].concat(...newArr),\r\n          lastIndex: vers.lastIndex,\r\n        });\r\n      });\r\n    }\r\n    if (newSize > oldSize) {\r\n      currentHistory.forEach((vers) => {\r\n        let newArr = [];\r\n        while (vers.squares.length)\r\n          newArr.push(vers.squares.splice(0, oldSize));\r\n        newArr.forEach((x) => x.push(null));\r\n        newArr.push(Array(newSize).fill(null));\r\n        newHistory.push({\r\n          squares: [].concat(...newArr),\r\n          lastIndex: vers.lastIndex,\r\n        });\r\n      });\r\n    }\r\n    setHistory(newHistory);\r\n    setBoardSize(+event.target.value);\r\n  }\r\n  \r\n  function handleClick(i) {\r\n    const currentHistory = history.slice(0, stepNumber + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      currentHistory.concat([\r\n        {\r\n          squares: squares,\r\n          lastIndex: i,\r\n        },\r\n      ])\r\n    );\r\n    setStepNumber(currentHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  }\r\n\r\n  function handleSort() {\r\n    setAscending(!ascending);\r\n  }\r\n\r\n  const currentHistory = history;\r\n  const current = currentHistory[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  let moves = currentHistory.map((step, move) => {\r\n    const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n    return (\r\n      <li key={move}>\r\n        <button\r\n          className={move === stepNumber ? \"selected-item\" : \"\"}\r\n          onClick={() => jumpTo(move)}\r\n        >\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n  if (!ascending) moves = moves.reverse();\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.square;\r\n  } else {\r\n    if (stepNumber === boardSize * boardSize) status = \"Game ended in a draw\";\r\n    else status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  function getPosition() {\r\n    const index = current.lastIndex;\r\n    if (index !== null)\r\n      return `Position (col,row)=(${1 + (index % boardSize)}, ${\r\n        1 + Math.floor(index / boardSize)\r\n      })`;\r\n    return `Game start`;\r\n  }\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(i) => handleClick(i)}\r\n          win={winner !== null ? winner.line : null}\r\n          boardSize={boardSize}\r\n        />\r\n      </div>\r\n      <div className=\"game-option\">\r\n        <div>\r\n          <strong>Option</strong>\r\n        </div>\r\n        <div>Board size</div>\r\n        <input\r\n          type=\"number\"\r\n          value={boardSize}\r\n          min={5}\r\n          max={20}\r\n          onChange={handleChange}\r\n        />\r\n        <br /> <br />\r\n        <div>Order</div>\r\n        <button onClick={() => handleSort()}>\r\n          {ascending === true ? \"Desceding order\" : \"Ascending order\"}\r\n        </button>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <div>{getPosition()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Game from \"../components/Game\";\n\nexport default function App() {\n  return <Game />;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}